package me.zhengjie.modules.stat.service.impl;

import me.zhengjie.modules.stat.domain.VulnerabilityStat;
import me.zhengjie.modules.stat.dto.VulnerabilityStatQueryCriteria;
import me.zhengjie.modules.stat.repository.VulnerabilityStatRepository;
import me.zhengjie.modules.stat.service.VulnerabilityStatService;
import me.zhengjie.modules.stat.specification.VulnerabilityStatSpecification;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;

@Service
public class VulnerabilityStatServiceImpl extends BaseStatServiceImpl<VulnerabilityStat, VulnerabilityStatRepository> implements VulnerabilityStatService {
    
    @Autowired
    public VulnerabilityStatServiceImpl(VulnerabilityStatRepository repository) {
        super(repository);
    }

    @Override
    protected String getDefaultSortField() {
        return "foundTime";
    }

    @Override
    protected void setCreateTime(VulnerabilityStat entity) {
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(LocalDateTime.now());
        }
    }

    @Override
    protected void setUpdateTime(VulnerabilityStat entity) {
        // VulnerabilityStat 没有 updatedAt 字段，跳过
    }

    @Override
    protected void updateFields(VulnerabilityStat target, VulnerabilityStat source) {
        if (source.getFoundTime() != null) {
            target.setFoundTime(source.getFoundTime());
        }
        if (source.getHighRiskCount() != null) {
            target.setHighRiskCount(source.getHighRiskCount());
        }
        if (source.getMediumRiskCount() != null) {
            target.setMediumRiskCount(source.getMediumRiskCount());
        }
        if (source.getLowRiskCount() != null) {
            target.setLowRiskCount(source.getLowRiskCount());
        }
    }

    @Override
    protected Page<VulnerabilityStat> findByCreatedAtBetween(LocalDateTime startTime, LocalDateTime endTime, Pageable pageable) {
        return repository.findByCreatedAtBetween(startTime, endTime, pageable);
    }

    @Override
    protected Page<VulnerabilityStat> findByKeyField(String keyword, Pageable pageable) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return repository.findAll(pageable);
        }
        // For VulnerabilityStat, no specific text field to search, return all
        return repository.findAll(pageable);
    }

    /**
     * 复杂条件查询
     */
    public Page<VulnerabilityStat> findByCriteria(VulnerabilityStatQueryCriteria criteria, Pageable pageable) {
        Specification<VulnerabilityStat> spec = VulnerabilityStatSpecification.build(criteria);
        return repository.findAll(spec, pageable);
    }
} 