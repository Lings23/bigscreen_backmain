package me.zhengjie.modules.stat.service.impl;

import me.zhengjie.modules.stat.domain.VulnerabilityRecord;
import me.zhengjie.modules.stat.repository.VulnerabilityRecordRepository;
import me.zhengjie.modules.stat.service.VulnerabilityRecordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;

@Service
public class VulnerabilityRecordServiceImpl extends BaseStatServiceImpl<VulnerabilityRecord, VulnerabilityRecordRepository> implements VulnerabilityRecordService {
    
    @Autowired
    public VulnerabilityRecordServiceImpl(VulnerabilityRecordRepository repository) {
        super(repository);
    }

    @Override
    protected String getDefaultSortField() {
        return "foundTime";
    }

    @Override
    protected void setCreateTime(VulnerabilityRecord entity) {
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(LocalDateTime.now());
        }
    }

    @Override
    protected void setUpdateTime(VulnerabilityRecord entity) {
        entity.setUpdatedAt(LocalDateTime.now());
    }

    @Override
    protected void updateFields(VulnerabilityRecord target, VulnerabilityRecord source) {
        if (source.getSystemName() != null) {
            target.setSystemName(source.getSystemName());
        }
        if (source.getOrgName() != null) {
            target.setOrgName(source.getOrgName());
        }
        if (source.getVulnSource() != null) {
            target.setVulnSource(source.getVulnSource());
        }
        if (source.getVulnType() != null) {
            target.setVulnType(source.getVulnType());
        }
        if (source.getVulnLevel() != null) {
            target.setVulnLevel(source.getVulnLevel());
        }
        if (source.getFoundTime() != null) {
            target.setFoundTime(source.getFoundTime());
        }
        if (source.getFixContent() != null) {
            target.setFixContent(source.getFixContent());
        }
    }
} 