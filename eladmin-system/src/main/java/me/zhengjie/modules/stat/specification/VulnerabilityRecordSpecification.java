package me.zhengjie.modules.stat.specification;

import me.zhengjie.modules.stat.domain.VulnerabilityRecord;
import me.zhengjie.modules.stat.dto.VulnerabilityRecordQueryCriteria;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.Predicate;
import java.util.ArrayList;
import java.util.List;

/**
 * 漏洞记录查询规格构建器
 */
public class VulnerabilityRecordSpecification {

    public static Specification<VulnerabilityRecord> build(VulnerabilityRecordQueryCriteria criteria) {
        return (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            // 关键字搜索 - 在系统名称、组织名称、漏洞来源、漏洞类型中搜索
            if (criteria.getKeyword() != null && !criteria.getKeyword().trim().isEmpty()) {
                String keyword = "%" + criteria.getKeyword().trim() + "%";
                Predicate systemNamePredicate = criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("systemName")), 
                    keyword.toLowerCase()
                );
                Predicate orgNamePredicate = criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("orgName")), 
                    keyword.toLowerCase()
                );
                Predicate vulnSourcePredicate = criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("vulnSource")), 
                    keyword.toLowerCase()
                );
                Predicate vulnTypePredicate = criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("vulnType")), 
                    keyword.toLowerCase()
                );
                predicates.add(criteriaBuilder.or(systemNamePredicate, orgNamePredicate, vulnSourcePredicate, vulnTypePredicate));
            }

            // 系统名称
            if (criteria.getSystemName() != null && !criteria.getSystemName().trim().isEmpty()) {
                predicates.add(criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("systemName")), 
                    "%" + criteria.getSystemName().toLowerCase() + "%"
                ));
            }

            // 组织名称
            if (criteria.getOrgName() != null && !criteria.getOrgName().trim().isEmpty()) {
                predicates.add(criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("orgName")), 
                    "%" + criteria.getOrgName().toLowerCase() + "%"
                ));
            }

            // 漏洞来源
            if (criteria.getVulnSource() != null && !criteria.getVulnSource().trim().isEmpty()) {
                predicates.add(criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("vulnSource")), 
                    "%" + criteria.getVulnSource().toLowerCase() + "%"
                ));
            }

            // 漏洞类型
            if (criteria.getVulnType() != null && !criteria.getVulnType().trim().isEmpty()) {
                predicates.add(criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("vulnType")), 
                    "%" + criteria.getVulnType().toLowerCase() + "%"
                ));
            }

            // 漏洞等级
            if (criteria.getVulnLevel() != null && !criteria.getVulnLevel().trim().isEmpty()) {
                predicates.add(criteriaBuilder.equal(root.get("vulnLevel"), criteria.getVulnLevel()));
            }

            // 修复内容
            if (criteria.getFixContent() != null && !criteria.getFixContent().trim().isEmpty()) {
                predicates.add(criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("fixContent")), 
                    "%" + criteria.getFixContent().toLowerCase() + "%"
                ));
            }

            // 状态
            if (criteria.getStatus() != null && !criteria.getStatus().trim().isEmpty()) {
                predicates.add(criteriaBuilder.equal(root.get("status"), criteria.getStatus()));
            }

            // 发现时间范围
            if (criteria.getFoundTimeStart() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("foundTime"), criteria.getFoundTimeStart()));
            }
            if (criteria.getFoundTimeEnd() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("foundTime"), criteria.getFoundTimeEnd()));
            }

            // 创建时间范围
            if (criteria.getStartDate() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(
                    root.get("createdAt"), 
                    criteria.getStartDate().atStartOfDay()
                ));
            }
            if (criteria.getEndDate() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(
                    root.get("createdAt"), 
                    criteria.getEndDate().atTime(23, 59, 59)
                ));
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
    }
}
