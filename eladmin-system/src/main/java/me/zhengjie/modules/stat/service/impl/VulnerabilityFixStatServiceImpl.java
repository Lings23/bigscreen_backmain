package me.zhengjie.modules.stat.service.impl;

import me.zhengjie.modules.stat.domain.VulnerabilityFixStat;
import me.zhengjie.modules.stat.dto.VulnerabilityFixStatQueryCriteria;
import me.zhengjie.modules.stat.repository.VulnerabilityFixStatRepository;
import me.zhengjie.modules.stat.service.VulnerabilityFixStatService;
import me.zhengjie.modules.stat.specification.VulnerabilityFixStatSpecification;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;

@Service
public class VulnerabilityFixStatServiceImpl extends BaseStatServiceImpl<VulnerabilityFixStat, VulnerabilityFixStatRepository> implements VulnerabilityFixStatService {
    
    @Autowired
    public VulnerabilityFixStatServiceImpl(VulnerabilityFixStatRepository repository) {
        super(repository);
    }

    @Override
    protected String getDefaultSortField() {
        return "statTime";
    }

    @Override
    protected void setCreateTime(VulnerabilityFixStat entity) {
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(LocalDateTime.now());
        }
    }

    @Override
    protected void setUpdateTime(VulnerabilityFixStat entity) {
        entity.setUpdatedAt(LocalDateTime.now());
    }

    @Override
    protected void updateFields(VulnerabilityFixStat target, VulnerabilityFixStat source) {
        if (source.getStatTime() != null) {
            target.setStatTime(source.getStatTime());
        }
        if (source.getFixedCount() != null) {
            target.setFixedCount(source.getFixedCount());
        }
        if (source.getUnfixedCount() != null) {
            target.setUnfixedCount(source.getUnfixedCount());
        }
    }

    @Override
    protected Page<VulnerabilityFixStat> findByCreatedAtBetween(LocalDateTime startTime, LocalDateTime endTime, Pageable pageable) {
        return repository.findByCreatedAtBetween(startTime, endTime, pageable);
    }

    @Override
    protected Page<VulnerabilityFixStat> findByKeyField(String keyword, Pageable pageable) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return repository.findAll(pageable);
        }
        // For VulnerabilityFixStat, no specific text field to search, return all
        return repository.findAll(pageable);
    }

    @Override
    public Page<VulnerabilityFixStat> findAll(Specification<VulnerabilityFixStat> spec, Pageable pageable) {
        return repository.findAll(spec, pageable);
    }

    @Override
    public Page<VulnerabilityFixStat> findByTimePeriod(LocalDateTime startTime, LocalDateTime endTime, Integer page, Integer size) {
        Pageable pageable = createPageable(page, size);
        return findByCreatedAtBetween(startTime, endTime, pageable);
    }

    @Override
    public Page<VulnerabilityFixStat> findByKeyword(String keyword, Integer page, Integer size) {
        Pageable pageable = createPageable(page, size);
        return findByKeyField(keyword, pageable);
    }

    @Override
    public Page<VulnerabilityFixStat> findByCriteria(VulnerabilityFixStatQueryCriteria criteria, Pageable pageable) {
        Specification<VulnerabilityFixStat> spec = VulnerabilityFixStatSpecification.build(criteria);
        return findAll(spec, pageable);
    }

    @Override
    public Pageable createPageable(Integer page, Integer size) {
        return super.createPageable(page, size);
    }
}