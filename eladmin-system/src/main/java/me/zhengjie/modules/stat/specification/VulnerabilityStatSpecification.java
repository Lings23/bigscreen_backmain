package me.zhengjie.modules.stat.specification;

import me.zhengjie.modules.stat.domain.VulnerabilityStat;
import me.zhengjie.modules.stat.dto.VulnerabilityStatQueryCriteria;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.Predicate;
import java.util.ArrayList;
import java.util.List;

/**
 * 漏洞统计查询规格构建器
 */
public class VulnerabilityStatSpecification {

    public static Specification<VulnerabilityStat> build(VulnerabilityStatQueryCriteria criteria) {
        return (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            // 状态
            if (criteria.getStatus() != null && !criteria.getStatus().trim().isEmpty()) {
                predicates.add(criteriaBuilder.equal(root.get("status"), criteria.getStatus()));
            }

            // 高风险数量范围
            if (criteria.getHighRiskCountMin() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("highRiskCount"), criteria.getHighRiskCountMin()));
            }
            if (criteria.getHighRiskCountMax() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("highRiskCount"), criteria.getHighRiskCountMax()));
            }

            // 中风险数量范围
            if (criteria.getMediumRiskCountMin() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("mediumRiskCount"), criteria.getMediumRiskCountMin()));
            }
            if (criteria.getMediumRiskCountMax() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("mediumRiskCount"), criteria.getMediumRiskCountMax()));
            }

            // 低风险数量范围
            if (criteria.getLowRiskCountMin() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("lowRiskCount"), criteria.getLowRiskCountMin()));
            }
            if (criteria.getLowRiskCountMax() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("lowRiskCount"), criteria.getLowRiskCountMax()));
            }

            // 发现时间范围
            if (criteria.getFoundTimeStart() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("foundTime"), criteria.getFoundTimeStart()));
            }
            if (criteria.getFoundTimeEnd() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("foundTime"), criteria.getFoundTimeEnd()));
            }

            // 创建时间范围
            if (criteria.getStartDate() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(
                    root.get("createdAt"), 
                    criteria.getStartDate().atStartOfDay()
                ));
            }
            if (criteria.getEndDate() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(
                    root.get("createdAt"), 
                    criteria.getEndDate().atTime(23, 59, 59)
                ));
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
    }
}
