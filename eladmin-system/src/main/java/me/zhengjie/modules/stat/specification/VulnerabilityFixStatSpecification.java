package me.zhengjie.modules.stat.specification;

import me.zhengjie.modules.stat.domain.VulnerabilityFixStat;
import me.zhengjie.modules.stat.dto.VulnerabilityFixStatQueryCriteria;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.Predicate;
import java.util.ArrayList;
import java.util.List;

/**
 * 漏洞修复统计查询规格构建器
 */
public class VulnerabilityFixStatSpecification {

    public static Specification<VulnerabilityFixStat> build(VulnerabilityFixStatQueryCriteria criteria) {
        return (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            // 状态
            if (criteria.getStatus() != null && !criteria.getStatus().trim().isEmpty()) {
                predicates.add(criteriaBuilder.equal(root.get("status"), criteria.getStatus()));
            }

            // 已修复数量范围
            if (criteria.getFixedCountMin() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("fixedCount"), criteria.getFixedCountMin()));
            }
            if (criteria.getFixedCountMax() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("fixedCount"), criteria.getFixedCountMax()));
            }

            // 未修复数量范围
            if (criteria.getUnfixedCountMin() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("unfixedCount"), criteria.getUnfixedCountMin()));
            }
            if (criteria.getUnfixedCountMax() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("unfixedCount"), criteria.getUnfixedCountMax()));
            }

            // 统计时间范围
            if (criteria.getStatTimeStart() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("statTime"), criteria.getStatTimeStart()));
            }
            if (criteria.getStatTimeEnd() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("statTime"), criteria.getStatTimeEnd()));
            }

            // 创建时间范围
            if (criteria.getStartDate() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(
                    root.get("createdAt"), 
                    criteria.getStartDate().atStartOfDay()
                ));
            }
            if (criteria.getEndDate() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(
                    root.get("createdAt"), 
                    criteria.getEndDate().atTime(23, 59, 59)
                ));
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
    }
}
